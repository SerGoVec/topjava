package ru.javawebinar.topjava.repository;

import ru.javawebinar.topjava.model.Meal;

import java.util.Collection;

/*для разных реализаций (методов) хранения
* используется интерфейс.
* repository названа потому что будет работа со sping data
* там repository.
* паттерн Data Access Object (dao): абстрагировать и инкапсулировать доступ к источнику данных.
*                           DAO управляет соединением с источником данных для получения
*                           и записи данных
*
* паттерн Repository выступает в роли посредника между слоем домена и слоем отображения реляционных
* данных. Он выполняет роль коллекции объектов домена в оперативной памяти. Таким образом,
* репозиторий представляет собой более высокий уровень абстракции над слоем отображения данных.
* Это означает, что Repository может содержать методы, возвращающие объекты предметной области,
* удовлетворящие какому-либо заданному критерию, а также
* содержать логику конструирования запросов к нижележащему слою (собственно DAO).
*
* http://codehelper.ru/questions/205/new/repository-%D0%B8-dao-%D0%BE%D1%82%D0%BB%D0%B8%D1%87%D0%B8%D1%8F-%D0%BF%D1%80%D0%B5%D0%B8%D0%BC%D1%83%D1%89%D0%B5%D1
* %81%D1%82%D0%B2%D0%B0-%D0%BD%D0%B5%D0%B4%D0%BE%D1%81%D1%82%D0%B0%D1%82%D0%BA%D0%B8*/
public interface MealRepository {
    //поддерживает создание и обновление сущности
    Meal save(Meal meal);

    void delete(int id);

    Meal get (int id);

    Collection<Meal>getAll();
}
